from browser_search import search_google_free
from aiogram import F, Router
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from generate import ai_generate

router = Router()


class DialogStates(StatesGroup):
    waiting_for_query = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
    waiting_for_confirmation = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    waiting_for_additional_info = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —É—Ç–æ—á–Ω–µ–Ω–∏–π


@router.message(DialogStates.waiting_for_query)
async def handle_query(message: Message, state: FSMContext):
    query = message.text.strip()

    await state.update_data(user_query=query)

    response = await ai_generate(
        f"–û–ø—Ä–µ–¥–µ–ª–∏, –≥–¥–µ –∏—Å–∫–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: '{query}'. "
        "–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ '–±—Ä–∞—É–∑–µ—Ä' –∏–ª–∏ '–Ω–µ–π—Ä–æ—Å–µ—Ç—å'.", mode="definder"
    )

    if response.lower() not in ("–±—Ä–∞—É–∑–µ—Ä", "–Ω–µ–π—Ä–æ—Å–µ—Ç—å"):
        await message.answer(
            "–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å.",
            parse_mode="Markdown"
        )
        return

    await state.update_data(answer_type=response.lower())

    await message.answer(
        f"–Ø —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ *{response}*.\n"
        "–¢–æ—á–Ω–æ –∏—â–µ–º? (–î–∞/–£—Ç–æ—á–Ω–∏—Ç—å)",
        parse_mode="Markdown"
    )
    await state.set_state(DialogStates.waiting_for_confirmation)


@router.message(DialogStates.waiting_for_confirmation)
async def handle_confirmation(message: Message, state: FSMContext):
    user_choice = message.text.lower()
    data = await state.get_data()
    query = data.get("user_query", "")

    if user_choice == "–¥–∞":
        if data.get("answer_type") == "–±—Ä–∞—É–∑–µ—Ä":
            await message.answer(
                f"üîç –ò—â—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ: '{query}'...",
                parse_mode="Markdown"
            )

            urls = await search_google_free(query)

            if not urls:
                await message.answer(
                    "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.",
                    parse_mode="Markdown"
                )
                return

            response = "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:\n\n" + "\n".join(
                [f"{i + 1}. [{url}]({url})" for i, url in enumerate(urls[:5])]
            )
            await message.answer(response, parse_mode="Markdown")

        else:
            await message.answer(
                "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...",
                parse_mode="Markdown"
            )
            response = await ai_generate(query, mode="answer")
            await message.answer(response, parse_mode="Markdown")

        await state.set_state(DialogStates.waiting_for_query)

    elif user_choice == "—É—Ç–æ—á–Ω–∏—Ç—å":
        await message.answer(
            "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å? –û–ø–∏—à–∏ –¥–µ—Ç–∞–ª—å–Ω–µ–µ.",
            parse_mode="Markdown"
        )
        await state.set_state(DialogStates.waiting_for_additional_info)

    else:
        await state.set_state(DialogStates.waiting_for_query)


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç.\n"
        "–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å, –∏ —è —Å–∫–∞–∂—É, –≥–¥–µ –ª—É—á—à–µ –∏—Å–∫–∞—Ç—å ‚Äî –≤ *–±—Ä–∞—É–∑–µ—Ä–µ* –∏–ª–∏ *–Ω–µ–π—Ä–æ—Å–µ—Ç–∏*.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "- ¬´–ì–¥–µ –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã –Ω–∞ –ø–æ–µ–∑–¥?¬ª ‚Üí –±—Ä–∞—É–∑–µ—Ä\n"
        "- ¬´–ù–∞–ø–∏—à–∏ —Å—Ç–∏—Ö¬ª ‚Üí –Ω–µ–π—Ä–æ—Å–µ—Ç—å",
        parse_mode="Markdown"
    )
    await state.set_state(DialogStates.waiting_for_query)


@router.message(DialogStates.waiting_for_additional_info)
async def handle_additional_info(message: Message, state: FSMContext):
    additional_info = message.text.strip()
    data = await state.get_data()
    original_query = data.get("user_query", "")

    new_query = f"{original_query}. –£—Ç–æ—á–Ω–µ–Ω–∏–µ: {additional_info}"
    await state.update_data(user_query=new_query)

    await message.answer(
        "–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è—é...",
        parse_mode="Markdown"
    )
    await handle_query(message, state)


@router.message()
async def fallback_handler(message: Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
        parse_mode="Markdown"
    )
